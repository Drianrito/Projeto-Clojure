(ns caca-palavras.core
  (:require [clojure.string :as str]))
(def todas-palavras ["LIVRO" "CADERNO" "LAPIS" "BORRACHA" "MOCHILA" "TESOURA" "CANETA" "QUADRO" "GIZ" 
                    "PAPEL" "FOLHA" "LIVRARIA" "ESCOLA" "PROFESSOR" "ALUNO" "AULA" "TURMA" "EXAME"
                    "NOTA" "TAREFA" "ATIVIDADE" "DICIONARIO"])
(def palavras-escondidas (take 4 (shuffle todas-palavras)))
(def alfabeto "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(defn gerar-linha-aleatoria [tamanho]
  (vec (repeatedly tamanho #(str (rand-nth alfabeto)))))
(defn pode-inserir-na-linha? [linha palavra pos]
  (let [linha-str (str/join "" linha)
        palavra-up (str/upper-case palavra)
        tamanho-linha (count linha-str)]
    (and (<= (+ pos (count palavra-up)) tamanho-linha)
         (not-any? #(= palavra-up (subs linha-str % (+ % (count palavra-up)))) (range (inc (- tamanho-linha (count palavra-up))))))))
(defn inserir-palavra-na-linha [linha palavra pos]
  (let [parte1 (subvec linha 0 pos)
        parte2 (vec (map str (seq palavra)))
        parte3 (subvec linha (+ pos (count palavra)))]
    (into [] (concat parte1 parte2 parte3)))) ;
(defn inserir-palavra-na-grade [grade palavra]
  (let [linhas (shuffle (range (count grade)))
        palavra-up (str/upper-case palavra)]
    (loop [[linha-idx & restantes] linhas]
      (if (nil? linha-idx)
        (do
          (println "Não foi possível inserir a palavra:" palavra-up)
          grade)
        (let [linha (grade linha-idx)
              max-pos (- (count linha) (count palavra-up))
              posicoes (shuffle (range (inc max-pos)))]
          (if-let [pos (first (filter #(pode-inserir-na-linha? linha palavra-up %) posicoes))]
            (assoc grade linha-idx (inserir-palavra-na-linha linha palavra-up pos))
            (recur restantes)))))))
(defn gerar-grade [tamanho]
  (vec (repeatedly tamanho #(gerar-linha-aleatoria tamanho))))
(defn gerar-grade-com-palavras [tamanho palavras]
  (reduce inserir-palavra-na-grade (gerar-grade tamanho) palavras))
(defn exibir-grade [grade]
  (doseq [linha grade]
    (println (str/join " " linha))))
(defn contem-substring-exata? [linha palavra]
  (let [linha-str (str/join "" linha)
        palavra-up (str/upper-case palavra)]
    (some #(= palavra-up %)
          (map #(subs linha-str % (+ % (count palavra-up)))
               (range (inc (- (count linha-str) (count palavra-up))))))))
(defn palavra-horizontal? [grade palavra]
  (some #(contem-substring-exata? % palavra) grade))
(defn palavra-vertical? [grade palavra]
  (let [transposta (apply map vector grade)]
    (some #(contem-substring-exata? % palavra) transposta)))
(defn palavra-diagonal? [grade palavra]
  (let [n (count grade)
        palavra-up (str/upper-case palavra)
        len (count palavra-up)
        diagonais (for [i (range n)
                        j (range n)
                        :when (and (<= (+ i len) n)
                                   (<= (+ j len) n))]
                    [(for [k (range len)] (get-in grade [(+ i k) (+ j k)])) ; ↘
                     (for [k (range len)] (get-in grade [(+ i k) (- j k)])) ; ↙
                     (for [k (range len)] (get-in grade [(- i k) (+ j k)])) ; ↗
                     (for [k (range len)] (get-in grade [(- i k) (- j k)])) ; ↖
                     ])]
    (some #(= (vec (map str palavra-up)) %)
          (apply concat diagonais))))
(defn encontrou-palavra? [grade palavra]
  (or (palavra-horizontal? grade palavra)
      (palavra-vertical? grade palavra)
      (palavra-diagonal? grade palavra)))
(defn jogar []
  (let [tamanho 10
        grade (gerar-grade-com-palavras tamanho palavras-escondidas)
        palavras-restantes (atom (set palavras-escondidas))]
    (println "Bem-vindo ao jogo de Caça-Palavras!")
    (println "Tente encontrar todas as palavras escondidas na grade.")
    (println)
    (loop []
      (exibir-grade grade)
      (println)
      (print "Palavras restantes: " (count @palavras-restantes) " palavras\n")
      (println "Palavras: " (str/join ", " todas-palavras))
      (println)
      (print "\nDigite uma palavra encontrada: ")
      (flush)
      (let [entrada (read-line)
            palavra (str/upper-case (str/trim entrada))]
        (cond
          (and (contains? @palavras-restantes palavra)
               (encontrou-palavra? grade palavra))
          (do
            (swap! palavras-restantes disj palavra)
            (println (str "\nPalavra \"" palavra "\" encontrada!\n"))
            (if (empty? @palavras-restantes)
              (println "Parabéns! Você encontrou todas as palavras!")
              (recur)))
          :else
          (do
            (println "\nPalavra incorreta ou já encontrada. Tente novamente.\n")
            (recur)))))))
(defn -main []
  (jogar))
jogar
